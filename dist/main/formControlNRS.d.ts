import { Plugin, Initiator } from "rx-store-types";
import { FormController, FormControlData, FormControlBasicMetadata, FormStubs, DatumType } from "./interfaces";
import { Observable } from "rxjs";
declare class FormControllerImpl<F extends FormControlData, M extends Record<F[number]["field"], FormControlBasicMetadata>, S extends string> implements FormController<F, M, S>, Plugin<S> {
    private formSelector;
    validator: (formData: F) => Partial<M>;
    asyncValidator?: ((formData: F) => Observable<Partial<M>> | Promise<Partial<M>>) | undefined;
    private fields?;
    private metaComparator?;
    private metaComparatorMap?;
    private cloneFunction?;
    private cloneFunctionMap?;
    private connector?;
    private metadata$?;
    constructor(formSelector: S, validator: (formData: F) => Partial<M>, asyncValidator?: ((formData: F) => Observable<Partial<M>> | Promise<Partial<M>>) | undefined, fields?: FormStubs<F> | undefined, metaComparator?: ((meta1: Partial<M>, meta2: Partial<M>) => boolean) | undefined, metaComparatorMap?: (Partial<M> extends infer T ? { [K in keyof T]: (m1: Partial<M>[K], m2: Partial<M>[K]) => boolean; } : never) | undefined, cloneFunction?: ((meta: Partial<M>) => Partial<M>) | undefined, cloneFunctionMap?: (Partial<M> extends infer T ? { [K in keyof T]: (metaOne: Partial<M>[K]) => Partial<M>[K]; } : never) | undefined);
    private reportNoneConnectedError;
    private safeExecute;
    private shallowCloneFormData;
    private safeClone;
    private findDatumByField;
    private findFromClonedAndExecute;
    private commitMutation;
    private safeCommitMutation;
    private safeCommitMeta;
    private removeDataByFields;
    private appendDataByFields;
    private validatorExecutor;
    private getExcludedMeta;
    private getAsyncFields;
    private asyncValidatorExecutor;
    selector(): S;
    initiator: Initiator;
    chain<P extends Plugin<string>[]>(...plugins: P): this;
    private setAsyncState;
    getMeta(): Partial<M>;
    getClonedMetaByField(field: keyof Partial<M>): any;
    getFieldMeta(field: F[number]["field"]): Partial<M>[F[number]["field"]];
    getFieldsMeta(fields: F[number]["field"][]): Partial<M>;
    observeMeta(callback: (meta: Partial<M>) => void): () => void | undefined;
    observeMetaByField<K extends keyof M>(field: K, callback: (metaOne: Partial<M>[K]) => void): () => void | undefined;
    startValidation(): {
        stopSyncValidation: () => void;
        stopAsyncValidation: (() => void) | undefined;
    } | undefined;
    changeFormDatum<N extends number>(field: F[N]["field"], value: F[N]["value"]): this;
    hoverFormField<N extends number>(field: F[N]["field"], hoverOrNot: boolean): this;
    changeFieldType<N extends number>(field: F[N]["field"], type: DatumType): this;
    resetFormDatum<N extends number>(field: F[N]["field"]): this;
    resetFormAll(): this;
    touchFormField<N extends number>(field: F[N]["field"], touchOrNot: boolean): this;
    emptyFormField<N extends number>(field: F[N]["field"]): this;
    focusFormField<N extends number>(field: F[N]["field"], focusOrNot: boolean): this;
    appendFormData(fields: FormStubs<F>): void;
    removeFormData(fields: Array<F[number]["field"]>): void;
    setMetadata(meta: Partial<M>): void;
    setMetaByField<K extends keyof M>(field: K, metaOne: Partial<M>[K]): void;
}
export default FormControllerImpl;
